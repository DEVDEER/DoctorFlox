<Window x:Class="devdeer.DoctorFlox.Ui.WpfSample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:mvvm="clr-namespace:devdeer.DoctorFlox.Logic.Wpf;assembly=DoctorFlox.Logic.Wpf"
        xmlns:local="clr-namespace:devdeer.DoctorFlox.Ui.WpfSample"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:Commands="clr-namespace:devdeer.DoctorFlox.Logic.Wpf.Commands;assembly=DoctorFlox.Logic.Wpf"
        mc:Ignorable="d"
        Title="{Binding Caption}"
        Height="470"
        Width="500"
        MinHeight="470"
        MinWidth="500"
        WindowStartupLocation="CenterScreen" 
        DataContext="{Binding MainViewModel, Source={StaticResource Locator}}"
        IsEnabled="{Binding IsValid, Source={StaticResource MessageListener}}">
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Closing">
            <Commands:EventToCommand Command="{Binding WindowClosingCommand}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Window.Resources>
        <Style TargetType="TextBlock" BasedOn="{StaticResource Hint}">
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <GroupBox Grid.Row="0" Grid.Column="0" Header="View Resolving">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0">
                    The label below will use the property 'AssociatedView' of the BaseViewModel to get the
                    caption of the Window itself.
                </TextBlock>
                <Label Grid.Row="1" Content="{Binding AssociatedView.Title}" />
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="0" Grid.Column="1" Header="Command Binding">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0">
                    Enter a text in the field below and see how the button will change it's state due to the command binding.
                </TextBlock>
                <TextBox Grid.Row="1" Text="{Binding TestMessage, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                <Button Grid.Row="2" Content="Show Message" Command="{Binding ShowMessageCommand}" />
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="0" Grid.Column="2" Header="View Control">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0">
                    Use the buttons to open other views from within this BaseViewModel. If you check the 'UseMessenger' below, the logic
                    will switch to Messenger-based window-opening instead of using reflection-based logic.
                </TextBlock>
                <CheckBox Grid.Row="1" Content="Use Messenger" IsChecked="{Binding UseMessengerForWindowActions, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <Button Grid.Row="2" Content="Show Child" Command="{Binding OpenChildWindowCommand}" />
                <Button Grid.Row="3" Content="Show List Window" Command="{Binding OpenCollectionWindowCommand}" />
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="1" Grid.Column="0" Header="Multiple windows">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0">
                    This will open 3 windows binding against the same type of view model. If you click the button you will see
                    the profe of the fact that each view model will find it's view even if there is more than one bound.
                </TextBlock>
                <Button Grid.Row="1" Content="Open 3 windows" Command="{Binding OpenMultiWindowCommand}" />
            </Grid>
        </GroupBox>

    </Grid>
</Window>